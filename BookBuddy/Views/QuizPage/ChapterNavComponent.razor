@using BookBuddy.Models.QuizModels
@using BookBuddy.Models.ResultModels

<div class="card">
    <img src="@Quiz?.ImageUrl" alt="@Quiz?.ImageAltText" />
    <h3>@Quiz?.Title</h3>
    <ul class="chapter-list">
        @if (Quiz?.Chapters != null)
        {
            @foreach (var chapter in Quiz.Chapters)
            {
                <li class="chapter-list-item @(chapter.ChapterId == ActiveChapterId ? "active" : "")" onclick="@(() => ToggleQuestions(chapter.ChapterId))">
                    @chapter.ChapterTitle
                </li>
                @if (chapter.ShowQuestions)
                {
                    <ul class="question-list">
                        @foreach (var question in chapter.Questions)
                        {
                            <li class="question-list-item @(question.QuestionId == ActiveQuestionId ? "active" : "")" onclick="@(() => DisplayQuestion(question.QuestionId))">
                                    @question.QuestionTitle
                            </li>
                        }
                    </ul>
                }
            }
        }
        else
        {
            <li>No chapters available</li>
        }
    </ul>
</div>

@code {
    [Parameter] public QuizModel? Quiz { get; set; } = null!;
    [Parameter] public QuizResultModel? Result { get; set; }
    [Parameter] public EventCallback<int> OnQuestionSelected { get; set; }

    private int ActiveChapterId { get; set; }
    private int ActiveQuestionId { get; set; }

    private void ToggleQuestions(int chapterId)
    {
        var chapter = Quiz?.Chapters.FirstOrDefault(c => c.ChapterId == chapterId);
        if (chapter != null)
        {
            chapter.ShowQuestions = !chapter.ShowQuestions;
            StateHasChanged();
        }
    }

    private async Task DisplayQuestion(int questionId)
    {
        var chapter = Quiz?.Chapters.FirstOrDefault(c => c.Questions.Any(q => q.QuestionId == questionId));
        if (chapter != null)
        {
            ActiveChapterId = chapter.ChapterId;
            ActiveQuestionId = questionId;
        }
        if (OnQuestionSelected.HasDelegate)
        {
            await OnQuestionSelected.InvokeAsync(questionId);
        }
    }
}
