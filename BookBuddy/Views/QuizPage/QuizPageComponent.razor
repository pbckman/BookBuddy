@using BookBuddy.Business.Factories
@using BookBuddy.Business.Services.AccountService
@using BookBuddy.Business.Services.PageService
@using BookBuddy.Business.Services.QuizService
@using BookBuddy.Models.QuizModels
@using BookBuddy.Models.ResultModels
@using BookBuddy.Models.ViewModels
@inject IQuizService QuizService
@inject ProfileService ProfileService
@inject IPageService PageService
@inject IQuizFactory QuizFactory

<section class="quiz-page">
    <div class="chapter-nav-component">
        <ChapterNavComponent Quiz="Quiz" Result="Result" OnQuestionSelected="HandleQuestionSelected" />
    </div>
    <div class="quiz-component">
        <QuizComponent Result="Result" CurrentChapter="CurrentChapter" CurrentQuestion="CurrentQuestion" />
    </div>
</section>

@code {
    [Parameter] public int QuizPageId { get; set; }
    [Parameter] public string Language { get; set; } = null!;
    public QuizResultModel Result { get; set; } = new();
    public QuizModel Quiz { get; set; } = new();
    public ChapterModel CurrentChapter { get; set; } = new();
    public QuestionModel CurrentQuestion { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        var profile = await ProfileService.GetSelectedProfileAsync();
        var currentQuizPage = PageService.GetQuizPageById(QuizPageId, Language);
        Quiz = QuizFactory.Create(currentQuizPage);
        CurrentChapter = Quiz?.Chapters.FirstOrDefault() ?? new ChapterModel();
        CurrentQuestion = CurrentChapter?.Questions.FirstOrDefault() ?? new QuestionModel();

        if (profile != null)
        {
            var result = await QuizService.GetResultByQuizIdAsync(profile.Id, QuizPageId);

            if (result != null)
            {
                Result = result;
            };
        }
    }

    private void HandleQuestionSelected(int questionId)
    {
        if(questionId > 0)
        {
            CurrentChapter = Quiz.Chapters.FirstOrDefault(c => c.Questions.Any(q => q.QuestionId == questionId)) ?? new ChapterModel();
            CurrentQuestion = CurrentChapter.Questions.FirstOrDefault(q => q.QuestionId == questionId) ?? new QuestionModel();
            StateHasChanged();
        }
    }
}
