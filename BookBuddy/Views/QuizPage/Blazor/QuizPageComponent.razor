
<section class="quiz-page">
    <a href="@GetBackUrl()" class="quiz-back-btn btn">
        <i class="fa-solid fa-x"></i>
    </a>
    @if (isLoading)
    {
        <div class="spinner-container card">
            <img src="images/BookLoader.gif" alt="Loading..." class="spinnger-gif">
        </div>
    }
    else
    {
        <button aria-label="Navigation menu button" class="quiz-nav-open" @onclick="ToggleNav">
            <span class="quiz-nav-toggler-icon">
                <i class="fa-solid fa-bars"></i>
            </span>
        </button>
        <div class="chapter-nav-component">
            <ChapterNavComponent 
                Model="Model" 
                OnChapterSelected="HandleSelectedChapter" 
                OnQuestionSelected="HandleSelectedQuestion"
                OnSummarySelected="HandleSelectedSummary"
                OnResultSelected="HandleSelectedResult" />

            <button class="quiz-nav-close" @onclick="ToggleNav">
                <span class="quiz-nav-toggler-icon">
                    <i class="fa-solid fa-x"></i>
                </span>
            </button>
        </div>
        <div class="quiz-component">
            <QuizComponent 
                Model="Model"
                Language="@Language" 
                OnModelChange="UpdateState" 
                OnCompletedChapter="UpdateResult" 
                OnStartedQuiz="HandleQuizStart" 
                OnSelectedOption="HandleSelectedOption"
                OnBtnSummaryClick="HandleSelectedSummary" />
        </div>
    }
    <button class="test-achievement btn" @onclick="TestAchievementsPopup">
        <i class="fa-solid fa-fire"></i>
    </button>
    <AchievementPopup @ref="popup" /> 
</section> 

<script>
    function ToggleNav() {
        const chapterNav = document.querySelector('.chapter-nav-component');
        chapterNav.classList.toggle('visible');
        const navOpenBtn = document.querySelector('.quiz-nav-open');
        navOpenBtn.classList.toggle('hidden');
    }
</script>

@code {
    [Parameter] public int QuizPageId { get; set; }
    [Parameter] public string Language { get; set; } = null!;
    [Parameter] public string Referer { get; set; } = null!;

    public QuizModel Model { get; set; } = new();
    private List<Achievement>? NewAchievements { get; set; }
    private AchievementPopup? popup { get; set; }
    private int profileId { get; set; }
    private bool isLoading = true;
    private List<Achievement> TestAchievements { get; set; } = new List<Achievement> { new Achievement { Name = "Test Achievement!!", ImageUrl = "/contentassets/f866e73dd15c4aeaa8a8feab3aedda4c/achievementpricethird.webp", ImageAltText = "Test" } };

    protected override async Task OnInitializedAsync()
    {
        @* SetBackUrl(); *@
        var profile = await ProfileService.GetSelectedProfileAsync();
        if (profile != null)
        {
 
            profileId = profile.Id;

            var quiz = QuizService.GetQuizData(QuizPageId, Language);

            var result = await QuizResultService.GetResultByQuizIdAsync(profileId, QuizPageId);
            if (result != null)
                Model = await QuizService.CreateQuizAsync(quiz, result);
            else
                Model = QuizService.CreateQuiz(quiz);
        }
        isLoading = false;
        StateHasChanged();
    }
    private string GetBackUrl()
    {
        return string.IsNullOrEmpty(Referer) 
            ? $"/{(@Language == "en" ? "" : @Language)}" 
            : Referer;
    }

    private async Task ToggleNav()
    {
        await JSRuntime.InvokeVoidAsync("ToggleNav");
    }

    private async Task HandleQuizStart()
    {

        if(Model.CurrentChapter == Model.Chapters.FirstOrDefault())
        {
            if (Model.QuizResult != null)
                return;

            var result = await QuizResultService.CreateQuizResultAsync(Model.Id, profileId);
            if (result != null)
                Model.QuizResult = result;
        }


        if (Model.CurrentChapter != null)
            Model = StateService.SetQuizStartState(Model);


        StateHasChanged();
    }

    private void HandleSelectedChapter(int chapterId)
    {
        var chapter = Model.Chapters.FirstOrDefault(c => c.ChapterId == chapterId);
        if (chapter == null)
            return;

        if (!QuizService.IsAvailableChapter(chapter, Model)) 
            return;

        Model = StateService.UpdateSelectedChapterState(chapter, Model);

        StateHasChanged();
    }

    private async Task HandleSelectedOption(string selectedOption)
    {
        if (Model.CurrentQuestion == null || Model.CurrentChapter!.IsFinished || (Model.QuizResult != null && Model.QuizResult.ChapterResults.Any(x => x.QuestionResults.Any(x => x.QuestionId == Model.CurrentQuestion.QuestionId))))
            return;

        await QuizService.SaveToLocalStorageAsync(Model, selectedOption);

        Model = StateService.UpdateSelectedOptionState(selectedOption, Model);

        StateHasChanged();
    }

    private void HandleSelectedQuestion(int questionId)
    {
        var chapter = Model.Chapters.FirstOrDefault(c => c.Questions.Any(q => q.QuestionId == questionId));
        if (chapter != null)
        {
            var question = chapter.Questions.FirstOrDefault(q => q.QuestionId == questionId);
            if (question == null)
                return;

            Model = StateService.UpdateSelectedQuestionState(chapter, question, Model);
        }

        StateHasChanged();
    }

    private void HandleSelectedSummary(int chapterId)
    {
        var chapter = Model.Chapters.FirstOrDefault(x => x.ChapterId == chapterId);
        if (chapter != null)
        {
            if (!StateService.IsFinishedChapter(chapter, Model))
                return;

            Model = StateService.UpdateSelectedSummaryState(chapter, Model);
        }

        StateHasChanged();
    }

    private async Task UpdateResult()
    {
        var achievements = await AchievementService.GetAchievementsAsync(profileId, Language);

        var chapterResult = await QuizResultService.SaveChapterResultAsync(Model.CurrentChapter!, Model.QuizResult!.Id);
        if (chapterResult != null)
            Model.QuizResult!.ChapterResults.Add(chapterResult);

        var updatedAchievements = await CheckForNewAchievements(achievements);

        await QuizService.RemoveLocalStorageQuizState(Model.QuizResult.Id);

        Model = StateService.UpdateCompletedChapterState(Model);

        if(QuizService.IsCompletedQuiz(Model))
        {
            var result = await QuizResultService.CompleteQuizAsync(Model.QuizResult!.Id);

            await CheckForNewAchievements(updatedAchievements);
            
            if(result != null)
            {
                Model.IsCompleted = true;
                Model.QuizResult = result;
            }
        }

        StateHasChanged();
    }

    private void HandleSelectedResult()
    {
        Model = StateService.UpdateCompletedQuizState(Model);

        StateHasChanged();
    }

    private void UpdateState()
    {
        StateHasChanged();
    }

    private async Task<List<Achievement>> CheckForNewAchievements(List<Achievement> previousAchievementState)
    {
        var updatedAchievements = await AchievementService.GetAchievementsAsync(profileId, Language);
        if (updatedAchievements.Count > previousAchievementState.Count)
        {
            NewAchievements = updatedAchievements
                .Where(achievement => !previousAchievementState
                .Any(prevAchievement => prevAchievement.Name == achievement.Name))
                .ToList();
            @foreach (var achievement in NewAchievements)
            {
                System.Diagnostics.Debug.WriteLine($"New Achievement: {achievement.Name}");
            }
            await TriggerAchievementsPopup();
        }

        return updatedAchievements;
    }
    private async Task TriggerAchievementsPopup()
    {
        if (NewAchievements.Any())
        {
            if (popup != null)
            {
                await popup.ShowAchievementsAsync(NewAchievements);
            }
        }
    }
    private async Task TestAchievementsPopup()
    {
        if (TestAchievements.Any())
        {
            if (popup != null)
            {
                await popup.ShowAchievementsAsync(TestAchievements);
            }
        }
    }
}
