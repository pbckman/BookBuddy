@using BookBuddy.Models.AchievementModels
@inject IJSRuntime JSRuntime

<div class="achievement-overlay" style="@(isVisible ? "display: flex;" : "display: none;")">
    <div class="achievement-popup card">
        @if (CurrentAchievement != null)
        {
            <div class="achievement-content">
                <img src="@CurrentAchievement.ImageUrl" alt="@CurrentAchievement.ImageAltText" />
                <h2>@CurrentAchievement.Name</h2>
                <button class="close-btn" @onclick="HandleCloseAchievement">Next</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<Achievement> TestAchievements { get; set; }
    public List<Achievement> Achievements { get; set; }
    private Achievement? CurrentAchievement { get; set; }
    private int currentIndex = 0;
    private bool isVisible = false;

    public async Task ShowAchievementsAsync(List<Achievement> newAchievements)
    {
        Achievements = newAchievements;
        @* System.Diagnostics.Debug.WriteLine($"Triggering Popup with {Achievements.Count} Achievements");
        @foreach (var achievement in Achievements)
        {
            System.Diagnostics.Debug.WriteLine($"Achievement: {achievement.Name}");
        } *@
        if (Achievements == null || Achievements.Count == 0)
            return;

        currentIndex = 0; 
        CurrentAchievement = Achievements[currentIndex];
        isVisible = true;

        await StartConfettiAsync();
        StateHasChanged(); 
    }

    private async Task HandleCloseAchievement()
    {
        if (currentIndex < Achievements.Count - 1)
        {
            // Visa nästa achievement
            await StartConfettiAsync();
            currentIndex++;
            CurrentAchievement = Achievements[currentIndex];
        }
        else
        {
            // Stäng popupen när listan är slut
            CurrentAchievement = null;
            isVisible = false;
            await StopConfettiAsync();
        }
        Achievements = new List<Achievement>(); 
        StateHasChanged(); // Uppdatera gränssnittet
    }
    public async Task StartConfettiAsync()
    {
        await JSRuntime.InvokeVoidAsync("startConfetti");
    }
    public async Task StopConfettiAsync()
    {
        await JSRuntime.InvokeVoidAsync("stopConfetti");
    }
}